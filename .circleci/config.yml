---
version: 2.1
executors:
  default:
    docker:
      - image: cimg/base:current
jobs:
  build:
    parameters:
      os:
        type: string
      install-type:
        type: string
    executor: default
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,resourcespecifications,supremm,jobefficiency'
      XDMOD_IS_CORE: 'yes'
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_SRC_DIR: ./../xdmod
      REG_TEST_BASE: /../../../../../project/tests/artifacts/regression/current
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Start up the Docker Containers
          command: >
            docker compose -f tests/playwright/Docker/docker-compose.yml up -d
      - run:
          name: Checkout XDMoD
          command: |
            git clone --depth=1 https://github.com/ubccr/xdmod.git $XDMOD_SRC_DIR
      - run:
          name: Copy Files into Docker Containers
          command: |
            docker cp ~/xdmod xdmod:/xdmod
            docker cp ~/project xdmod:/xdmod-supremm
            docker cp ~/xdmod playwright:/xdmod
            docker cp ~/project playwright:/xdmod-supremm
      - run:
          name: Mark the XDMoD directories as safe for git
          command: |
            docker exec -w /xdmod xdmod git config --global --add safe.directory /xdmod
            docker exec -w /xdmod-supremm xdmod git config --global --add safe.directory /xdmod-supremm
      - run:
          name: Install Dependencies for xdmod and xdmod-supremm
          command: |
            docker exec -w /xdmod xdmod composer config -g cache-files-ttl 315360000
            docker exec -w /xdmod xdmod composer install
            docker exec -w /xdmod-supremm xdmod composer install
      - run:
          name: Link the Supremm Module into XDMoD's directory structure
          command: |
            docker exec -w /xdmod-supremm xdmod ln -s /xdmod-supremm /xdmod/open_xdmod/modules/supremm
            docker exec -w /xdmod-supremm playwright ln -s /xdmod-supremm /xdmod/open_xdmod/modules/supremm
      - run:
          name: Generate Key for XDMoD
          command: docker exec xdmod openssl genrsa -out /etc/pki/tls/private/localhost.key -rand /proc/cpuinfo:/proc/filesystems:/proc/interrupts:/proc/ioports:/proc/uptime 2048
      - run:
          name: Generate Cert for XDMoD
          command: docker exec xdmod /usr/bin/openssl req -new -key /etc/pki/tls/private/localhost.key -x509 -sha256 -days 365 -set_serial $RANDOM -extensions v3_req -out /etc/pki/tls/certs/localhost.crt -subj "/C=XX/L=Default City/O=Default Company Ltd"
      - run:
          name: Create Test Artifact Directories in the XDMoD Container
          command: |
            docker exec xdmod mkdir -p ~/phpunit
            docker exec xdmod mkdir -p /tmp/screenshots
      - run:
          name: Build RPMs on XDMoD
          command: docker exec -w /xdmod xdmod /root/bin/buildrpm xdmod supremm
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: |
              docker exec -e XDMOD_TEST_MODE=<< parameters.install-type >> xdmod /xdmod/open_xdmod/modules/supremm/tests/integration/scripts/bootstrap.sh
      - run:
          name: Validate the newly installed / Upgraded XDMoD
          command: docker exec -w /xdmod-supremm xdmod ./tests/integration/scripts/validate.sh
      - run:
          name: Setup & Run QA Tests
          command: docker exec -w /xdmod-supremm xdmod ./tests/ci/scripts/qa-test-setup.sh
      - run:
          name: Run Post Install Tests
          command: docker exec -w /xdmod-supremm xdmod ./tests/ci/scripts/post-install-test.sh
      - run:
          name: Install composer dev deps
          command: |
            docker exec -w /xdmod xdmod composer install
            docker exec -w /xdmod-supremm xdmod composer install
      - run:
          name: Run Component Tests
          command: docker exec -w /xdmod-supremm xdmod ./tests/component/runtests.sh --log-junit ~/phpunit/component.xml
      - run:
          name: Setup Configuration Files for Integration Tests
          command: |
            docker exec xdmod mv /xdmod/configuration/organization.json /xdmod/configuration/organization.json.old
            docker exec xdmod mv /xdmod/configuration/portal_settings.ini /xdmod/configuration/portal_settings.ini.old
            docker exec xdmod cp /etc/xdmod/portal_settings.ini /xdmod/configuration/portal_settings.ini
            docker exec xdmod cp /etc/xdmod/organization.json /xdmod/configuration/organization.json
      - run:
          name: Run Integration Tests
          command: docker exec -w /xdmod-supremm xdmod ./tests/integration/runtests.sh --log-junit ~/phpunit/integration.xml
      - run:
          name: Run Regression Tests
          command: docker exec -w /xdmod xdmod ./tests/regression/runtests.sh --junit-output-dir ~/phpunit
      - run:
          name: Copy Test Results into Unit
          command: |
            docker cp xdmod:/root/phpunit ~/phpunit
            docker cp xdmod:/tmp/screenshots /tmp/screenshots
            mkdir ~/project/log ~/project/log/xdmod ~/project/log/php-fpm
            docker cp xdmod:/var/log/xdmod/. ~/project/log/xdmod
            docker cp xdmod:/var/log/php-fpm/. ~/project/log/php-fpm
            docker cp playwright:/root/xdmod/tests/playwright/test-results /tmp/screenshots
      - run:
          name: Copy Test results for Operating System
          command: |
            docker cp "playwright:/root/xdmod/tests/playwright/test_results-<< parameters.string_os >>.xml" ~/phpunit
      - run:
          name: Check for webserver errors
          command: |
            if [ -e ~/project/log/xdmod/apache-error.log ]; then
                test "$(fgrep -v ' [ssl:warn] ' ~/project/log/apache-error.log | wc -l)" = 0
            fi
      - run:
          name: Check for php-fpm errors
          command: |
            if [ -s ~/project/log/php-fpm/www-error.log ]; then
                echo "Errors seen in php fpm log";
                false;
            else
                echo "PHP fpm error log file is empty"
            fi
      - run:
          name: Check for etl_overseer errors
          command: |
            if grep -q error ~/project/log/xdmod/etl_overseer.log
            then
                echo "Errors seen in etl_overseer.log"
                false;
            fi
      - run:
          name: Ensure that no PHP command-line errors were generated
          command: |
            docker exec xdmod /bin/bash -c "if [ -s /var/log/php_errors.log ]; then cat /var/log/php_errors.log; false; fi"
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: ~/project/log
      - store_test_results:
          path: ~/phpunit

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: ['rocky8']
              install-type: ['fresh_install', 'upgrade']
