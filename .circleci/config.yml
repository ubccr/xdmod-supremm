---
version: 2.1
executors:
  rocky8: &rocky8-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-job_performance-10.5.0:rockylinux8-0.1
jobs:
  build:
    parameters:
      os:
        type: executor
      install-type:
        type: string
    executor: << parameters.os >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,supremm,jobefficiency'
      XDMOD_IS_CORE: 'yes'
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_SRC_DIR: ./../xdmod
      REG_TEST_BASE: /../../../../../project/tests/artifacts/regression/current
    steps:
      - checkout
      - run:
          name: Update nodejs
          command: dnf module -y reset nodejs && dnf module -y install nodejs:16
      - run:
          name: Checkout XDMoD
          command: |
            git clone --depth=1 --branch=xdmod11.0 https://github.com/ubccr/xdmod.git $XDMOD_SRC_DIR
      - run:
          name: Link the SUPREMM module into the XDMoD Source Directory
          command: |
              ln -s `pwd` $XDMOD_SRC_DIR/open_xdmod/modules/supremm
      - run:
          name: Update php module to 7.4
          command: dnf module -y reset php && dnf module -y enable php:7.4
      - run:
          name: Install PHP 7.4 && Pear pre-reqs
          command: dnf install -y php libzip-devel php-pear
      - run:
          name: Install MongoDB Pear module
          command: yes '' | pecl install mongodb || true
      - run:
          name: Add mongodb
          command: |
              ./tests/ci/scripts/install_mongo.sh

      # We need to update our acct before we can enable docker layer caching.
      # - setup_remote_docker:
      #    docker_layer_caching: true
      # Download and cache dependencies
      - run:
          name: Install SUPREMM Dependencies
          command: |
            composer install --no-progress
      - run:
          name: Install XDMoD Dependencies
          command: |
            composer config -g cache-files-ttl 315360000
            composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Create Test Artifact Directories
          command: |
            mkdir -p ~/phpunit
            mkdir -p /tmp/screenshots
      - run:
          name: Setup Environment Variables
          command: |
            echo "export XDMOD_SOURCE_DIR=${CIRCLE_WORKING_DIRECTORY}/${XDMOD_SRC_DIR}" >> $BASH_ENV
            echo "export SHIPPABLE_BUILD_DIR=${CIRCLE_WORKING_DIRECTORY}" >> $BASH_ENV
      - run:
          name: Build RPMS
          command: |
            pushd $XDMOD_SRC_DIR
            ~/bin/buildrpm xdmod supremm
            popd
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: |
              ./tests/integration/scripts/bootstrap.sh
      - run:
          name: Validate the newly installed / Upgraded XDMoD
          command: ./tests/integration/scripts/validate.sh
      - run:
          name: Make sure that the Composer Test Dependencies are installed
          command: |
              composer install -d $XDMOD_SRC_DIR --no-progress
              composer install --no-progress
      - run:
          name: Setup & Run QA Tests
          command: ./tests/ci/scripts/qa-test-setup.sh
      - run:
          name: Updating XDMOD_INSTALL_DIR env variable
          command: echo "export XDMOD_INSTALL_DIR=/usr/share/xdmod" >> $BASH_ENV
      - run:
          name: Run Post Install Tests
          command: ./tests/ci/scripts/post-install-test.sh
      - run:
          name: Run Component Tests
          command: ./tests/component/runtests.sh --log-junit ~/phpunit/component.xml
      - run:
          name: Make sure that the Composer Test Dependencies are installed
          command: |
            composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Run Integration Tests
          command: ./tests/integration/runtests.sh --log-junit ~/phpunit/integration.xml
      - run: pushd $HOME && rm -f chromedriver_linux64.zip && wget https://chromedriver.storage.googleapis.com/98.0.4758.80/chromedriver_linux64.zip && popd
      - run:
          name: 'Bodge the nodejs version to run an older one for the webdriver tests'
          command: |
            curl https://nodejs.org/dist/v10.24.1/node-v10.24.1-linux-x64.tar.xz | tar -xJC /usr/local
            chown root:root -R /usr/local/node-v10.24.1-linux-x64
      - run: pushd $XDMOD_SRC_DIR/tests/ui && PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH /usr/local/node-v10.24.1-linux-x64/bin/npm install && popd
      - run:
          name: Run UI Tests
          command: "PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH $XDMOD_SRC_DIR/tests/ui/runtests.sh --headless --log-junit ~/phpunit"
      - run:
          name: Ensure that no unexpected Apache errors were generated
          command: |
            if [ -e /var/log/php-fpm/www-error.log ]; then
                test `egrep -v "PHP Deprecated.*\/vendor\/.*" /var/log/php-fpm/www-error.log | wc -l` = 0;
            fi
      - run:
          name: Run Regression Tests
          command: ./tests/regression/runtests.sh --junit-output-dir ~/phpunit
      - run:
          name: Ensure that no PHP command-line errors were generated
          command: >
              if [ -e /var/log/php_errors.log ]; then
                  test `egrep -v 'vendor/phpunit/phpunit/src|PHP Notice:  fread()' /var/log/php_errors.log | wc -l` = 0;
              fi
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /var/log/xdmod
      - store_artifacts:
          path: /var/log/php-fpm
      - store_artifacts:
          path: /var/log/php_errors.log
      - store_test_results:
          path: ~/phpunit

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [rocky8]
              install-type: ["fresh_install", "upgrade"]
