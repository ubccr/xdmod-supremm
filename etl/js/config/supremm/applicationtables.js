"use strict";

var logger = { warning: function(s) { console.log(s); } };

var keyvaluetable = function(tablename) {

    var tabledata = {
        'NA': -1,
        'uncategorized': 1
    };
    var maxid = 2;

    return {
        addrow: function(description) {
            if (description in tabledata) {
                return;
            }
            tabledata[description] = maxid++;
        },
        getid: function(description) {
            if (description) {
                return tabledata[description];
            }
            return tabledata.uncategorized;
        },
        getsql: function() {
            var mysql = require("mysql");

            var row;
            var rows = [];

            for (row in tabledata) {
                if (tabledata.hasOwnProperty(row)) {
                    rows.push('(' + mysql.escape(tabledata[row]) + ',' + mysql.escape(row) + ')');
                }
            }

            return 'INSERT INTO \n\t' + tablename + ' (id, description)\nVALUES \n\t' + rows.join(',\n\t');
        }
    };
};

module.exports = function(configfile) {

    var fs = require("fs");
    var mysql = require("mysql");

    var appconf = JSON.parse(fs.readFileSync(configfile));

    var appfos = keyvaluetable('`modw_supremm`.`application_fos`');
    var appconfobj = {};
    var maxid = 0;
    var i;
    for (i = 0; i < appconf.length; i++) {
        if (appconfobj[ appconf[i].name ]) {
            logger.warning("Duplicate application definitions for " + appconf[i].name + " only the final definition will be used.");
        }
        appconfobj[ appconf[i].name ] = appconf[i];
        if (appconf[i].id) {
            maxid = Math.max(maxid, appconf[i].id);
        }
        if (appconf[i].science_area) {
            appfos.addrow(appconf[i].science_area);
        }
    }
    if (!appconfobj.PROPRIETARY) {
        logger.warning("Adding an application definition for PROPRIETARY");
        appconf.push({name: 'PROPRIETARY', license_type: 'permissive', hints: []});
    }

    // create autogenerated ids
    for (i = 0; i < appconf.length; i++) {
        if (!("id" in appconf[i])) {
            appconf[i].id = ++maxid;
        }
    }

    return {
        getsql: function() {

            var application_table = "`modw_supremm`.`application`";
            var applicationfos_table = "`modw_supremm`.`application_fos`";

            var approws = [];

            var i;
            for (i = 0; i < appconf.length; i++) {
                approws.push("\n\t(" + appconf[i].id + "," +
                        mysql.escape(appconf[i].name) + "," +
                        mysql.escape(appconf[i].license_type) + ',' +
                        mysql.escape(appfos.getid(appconf[i].science_area)) + ',' +
                        mysql.escape(appconf[i].url) + ")");
            }

            var apptablesql = [
                "LOCK TABLES " + applicationfos_table + " WRITE, " + application_table + " WRITE",
                "DELETE IGNORE FROM " + applicationfos_table,
                "DELETE IGNORE FROM " + application_table,
                "INSERT INTO " + application_table + " (id, name, license_type, application_fosid, url) VALUES " + approws.join(","),
                appfos.getsql(),
                "UNLOCK TABLES"

            ];
            return apptablesql.join(";\n");
        }
    };
};

/* Used for testing */
if (require.main === module ) {
    console.log(module.exports("./application.json").getsql());
}

